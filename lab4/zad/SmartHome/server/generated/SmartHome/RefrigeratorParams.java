//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `smart_home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class RefrigeratorParams extends com.zeroc.Ice.Value
{
    public RefrigeratorParams()
    {
    }

    public RefrigeratorParams(float minRefrigeratorTemperature, float maxRefrigeratorTemperature)
    {
        this.minRefrigeratorTemperature = minRefrigeratorTemperature;
        this.maxRefrigeratorTemperature = maxRefrigeratorTemperature;
    }

    public RefrigeratorParams(float minRefrigeratorTemperature, float maxRefrigeratorTemperature, float minFreezerTemperature, float maxFreezerTemperature)
    {
        this.minRefrigeratorTemperature = minRefrigeratorTemperature;
        this.maxRefrigeratorTemperature = maxRefrigeratorTemperature;
        setMinFreezerTemperature(minFreezerTemperature);
        setMaxFreezerTemperature(maxFreezerTemperature);
    }

    public float minRefrigeratorTemperature;

    public float maxRefrigeratorTemperature;

    private float minFreezerTemperature;
    private boolean _minFreezerTemperature;

    public float getMinFreezerTemperature()
    {
        if(!_minFreezerTemperature)
        {
            throw new java.util.NoSuchElementException("minFreezerTemperature is not set");
        }
        return minFreezerTemperature;
    }

    public void setMinFreezerTemperature(float minFreezerTemperature)
    {
        _minFreezerTemperature = true;
        this.minFreezerTemperature = minFreezerTemperature;
    }

    public boolean hasMinFreezerTemperature()
    {
        return _minFreezerTemperature;
    }

    public void clearMinFreezerTemperature()
    {
        _minFreezerTemperature = false;
    }

    public void optionalMinFreezerTemperature(java.util.Optional<java.lang.Float> v)
    {
        if(v == null || !v.isPresent())
        {
            _minFreezerTemperature = false;
        }
        else
        {
            _minFreezerTemperature = true;
            minFreezerTemperature = v.get();
        }
    }

    public java.util.Optional<java.lang.Float> optionalMinFreezerTemperature()
    {
        if(_minFreezerTemperature)
        {
            return java.util.Optional.of(minFreezerTemperature);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private float maxFreezerTemperature;
    private boolean _maxFreezerTemperature;

    public float getMaxFreezerTemperature()
    {
        if(!_maxFreezerTemperature)
        {
            throw new java.util.NoSuchElementException("maxFreezerTemperature is not set");
        }
        return maxFreezerTemperature;
    }

    public void setMaxFreezerTemperature(float maxFreezerTemperature)
    {
        _maxFreezerTemperature = true;
        this.maxFreezerTemperature = maxFreezerTemperature;
    }

    public boolean hasMaxFreezerTemperature()
    {
        return _maxFreezerTemperature;
    }

    public void clearMaxFreezerTemperature()
    {
        _maxFreezerTemperature = false;
    }

    public void optionalMaxFreezerTemperature(java.util.Optional<java.lang.Float> v)
    {
        if(v == null || !v.isPresent())
        {
            _maxFreezerTemperature = false;
        }
        else
        {
            _maxFreezerTemperature = true;
            maxFreezerTemperature = v.get();
        }
    }

    public java.util.Optional<java.lang.Float> optionalMaxFreezerTemperature()
    {
        if(_maxFreezerTemperature)
        {
            return java.util.Optional.of(maxFreezerTemperature);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    public RefrigeratorParams clone()
    {
        return (RefrigeratorParams)super.clone();
    }

    public static String ice_staticId()
    {
        return "::SmartHome::RefrigeratorParams";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -3638141501745471319L;

    /** @hidden */
    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.writeFloat(minRefrigeratorTemperature);
        ostr_.writeFloat(maxRefrigeratorTemperature);
        if(_minFreezerTemperature)
        {
            ostr_.writeFloat(1, minFreezerTemperature);
        }
        if(_maxFreezerTemperature)
        {
            ostr_.writeFloat(2, maxFreezerTemperature);
        }
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        minRefrigeratorTemperature = istr_.readFloat();
        maxRefrigeratorTemperature = istr_.readFloat();
        if(_minFreezerTemperature = istr_.readOptional(1, com.zeroc.Ice.OptionalFormat.F4))
        {
            minFreezerTemperature = istr_.readFloat();
        }
        if(_maxFreezerTemperature = istr_.readOptional(2, com.zeroc.Ice.OptionalFormat.F4))
        {
            maxFreezerTemperature = istr_.readFloat();
        }
        istr_.endSlice();
    }
}
